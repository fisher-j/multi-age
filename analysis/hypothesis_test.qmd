---
title: Hypothesis testing
---

```{r init}
#| echo: false

suppressWarnings(suppressPackageStartupMessages(library(tidyverse)))
load("./data_long.RData")
source("./scripts/utils.r")
transectid <- c("site", "treatment", "corner", "azi")
load_vars <- c("onehr", "tenhr", "hundhr", "dufflitter", "thoushr", "veg")
theme_update(
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank()
)
# this allows to adjust each panels coordinate limits
source("./scripts/coord_cartesian_panels.r")

```

## Manova and multiple anovas

The often recommended Pillai's Trace Test is robust to the normality assumption.
Follow up with linear discriminant analysis, or multiple one-way anovas
dependidng on research question. Using a Bonferroni correction for rejecting the
null of alpha / m, for m hypothesis, we get an alpha of 0.008 for an alpha of
0.05 and 6 tests.

This suggests that it is unlikely that all treatemnts are equal.

```{r}

tl <- load2("wide", treatment, all_of(load_vars))
myexpr <- expr(cbind(!!!syms(load_vars)) ~ treatment)
test1 <- do.call("manova", list(myexpr, data = quote(tl)))
summary(test1)

```

## Multiple one-way anovas

One way anova (using the welch test) can either assume constant variance or not.
A levene test (using median) indicates onehr, tenhr, and veg may all have
different *variances* between groups. 

The one-way anova test results are the same though between equal and unequal
variance assumptions. These tests support the notion that we can't assume that
the mean *vegetatvie* and *onehr* fuel loading are equal across all treatments, but
there isn't such evidence for the other fuel loading classes.

```{r}
#| label: tbl-anovas
#| tbl-cap: Levene tests suggest that variances are unequal across treatments
#|   for all fuel loading classes. Welches tests suggest that veg and onehr
#|   fuels may have different means among treatments.

d <- load2("long", treatment, all_of(load_vars)) |> group_by(class)

d |> nest() |> rowwise() |>
  transmute(
    levene = car::leveneTest(load ~ factor(treatment), data)[[3]][1],
    welch_uneq_var = oneway.test(load ~ treatment, data)$p.value,
    welch_eq_var = oneway.test(load ~ treatment, var.equal = TRUE, data = data)$p.value,
  ) |>
  knitr::kable(digits = 3)

```

We can use the Games Howell test for pairwise comparisons to follow up on the
welches test for differences between means when there is unequal variance among
groups. These p-values provide evidence that for onehr fuels, the mean value of
ha is greater than gs and ld, and the mean value for hd is also greater than gs
and ld. Also, for vegetation, gs is greater than ha only. While this test is
robust to the assumptions of normality, some of our data is highly skewed. Also,
because of the nesting of our data, observations are not independent, so our
effective sample size is not what is assumed by this test.

```{r}
#| label: fig-pairwise
#| fig-cap: pair-wise tests using Games-Howell, for unequal variances across
#|   groups. This shows many statistically significant differences, but the
#|   assumption of independence, which is likely to have a significant effect on
#|   our effective sample size.

gh_test <- d |> rstatix::games_howell_test(load ~ treatment) |>
  filter(p.adj.signif != "ns") |>
  rstatix::add_y_position(scales = "free", step.increase = 0.5)
ggpubr::ggboxplot(d, x = "treatment", y = "load", facet.by = "class") +
facet_wrap(~class, scales = "free") +
ggpubr::stat_pvalue_manual(gh_test, label = "p.adj") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.1)))

```

## Multi-level model {#sec-multi-level-model}

We have transects nested within plot corners, corners nested within plots, and
plots nested within sites. We would like to detect a treatment effect, while
accounting for the non-independence of this nested data structure. The following
model, I believe, captures this grouping structure.

```{r}

form <- load ~ 0 + treatment + (1 | site/treatment/corner)

```

This will estimate a group-wise intercept adjustments for each site, plot, and
corner, based on modeled variances for each of these grouping levels. 

```{r}

d <- load2("long", site, treatment, corner, all_of(load_vars)) |> 
  group_by(class)

m1 <- d |> nest() |> rowwise() |>
  transmute(
    mod = list(lme4::lmer(form, data = data)),
    emmeans = list(emmeans::emmeans(mod, "treatment")),
    pairs = list(as_tibble(pairs(emmeans, infer = TRUE)))
  )

```

Pairwise comparisons with Tukey adjustment for each of 6 multilevel models
representing different fuel loading classes reveals that the only evidence for
differences in means among treatments is with vegetation between the gs and ha
treatments. Another sizeable difference in means is between gs and ha for the
onehr fuels (@fig-multilevel-p-value).

```{r}
#| label: tbl-multilevel-p-values
#| tbl-cap: Pairwise comparisons among treatments with p-values < 0.05 for 6
#|   multilevel models. Only Veg, gs-ha comparison is statistically significant.

select(m1, pairs) |> unnest(pairs) |>
  filter(p.value <= 0.05) |>
  knitr::kable(digits = 3)

```

```{r}
#| label: fig-multilevel-p-value
#| fig-cap: 95% confidence intervals and pairwise comparisons of means for 6
#|   mixed models representing different fuel loading classes using package
#|   emmeans.

group_map(m1, ~ plot(.x$emmeans[[1]], comparisons = TRUE) + ggtitle(.x$class)) |>
  patchwork::wrap_plots()

```

Hypothesis testing with multi-level models is not as straight forward with
multi-level models. The problem, [explained here](https://bbolker.github.io/mixedmodels-misc/glmmFAQ.html#inference-and-confidence-intervals)
is two fold. For GLMMs and unbalanced experimental designs, the null
distribution for the F-statistic may not be F-distributed.

For us, we have a balanced design (I think) and so the F-statistic should be F
distributed *and* degrees of freedom should be clear from the details of the
design. Because of our balanced design, the Kenward-Rogers approach and
"inner-outer" design approach (which is used by `nlme::lme`) give the same
result of 9.

Using the package `pbkrtest` we can get parametric bootstrap liklihood ratio
statistics and test this statistic in a number of different ways. The PBtest
should probably be the most reliable, but I've included descriptions of the
others from the package documentation for reference. I'm also including an
F-test in which degrees of freedom are estimated with Kenward-Rogers approach.

LRT
: Assuming that LRT has a chi-square distribution.

PBtest
: The fraction of simulated LRT-values that are larger or equal to the observed
LRT value.

Bartlett
: A Bartlett correction is of LRT is calculated from the mean of the simulated
LRT-values

Gamma
: The reference distribution of LRT is assumed to be a gamma distribution with
mean and variance determined as the sample mean and sample variance of the
simulated LRT-values.

F
: The LRT divided by the number of degrees of freedom is assumed to be
F-distributed, where the denominator degrees of freedom are determined by
matching the first moment of the reference distribution. 

```{r}
#| warning: false
#| label: tbl-pbtest
#| tbl-cap: >
#|   Liklihood ratio tests and parametric boot strap tests of model
#|   significance: whether the model with treatment, fits the data better than
#|   the intercept only model (adjusting for nesting structure).

d <- load2("long", all_of(c(transectid, load_vars)))
dd <- ungroup(d) |> split(~class)


if(file.exists("pmod.Rdata")) {
  load("pmod.Rdata")
} else {
  cluster <- parallel::makeCluster(rep("localhost", parallel::detectCores()))

  pmod <- imap(dd, function(d, i) {
    form <- load ~ treatment + (1 | site/treatment/corner)
    amod <- lme4::lmer(form, d, REML = FALSE)
    nmod <- update(amod, . ~ . -treatment)
    krtest <- pbkrtest::KRmodcomp(amod, nmod) |>
      pluck("test", \(x) slice(x, 1)) |>
      rename(df = ndf) |>
      rownames_to_column("test")
    pbkrtest::PBmodcomp(amod, nmod, cl = cluster) |>
      pluck(summary, "test") |>
      rownames_to_column("test") |>
      bind_rows(krtest) |>
      mutate(class = i, .before = 1) |>
      relocate(c(df, ddf, F.scaling), .after = stat)
  }) |> 
    list_rbind() |>
    filter(test %in% c("LRT", "PBtest"))
 
  parallel::stopCluster(cluster)
  save(pmod, file = "pmod.Rdata")
}

pmod |> knitr::kable(digits = c(NA, NA, 2, 1, 2, 1, 4))

```

## Model checking

Taking a look at residual vs. fitted and qqplots of the model, it looks like our
residuals are not normally distributed and there is not constant variance.

```{r}
#| code-fold: true

# These are functions to plot for each model, residuals vs fitted and normal
# quantiles. The third function is a wrapper to do both.
resid_plot <- function(data) {
  data |>
    ggplot(aes(fitted, resid)) +
    geom_point() +
    facet_wrap(~class, scales = "free") +
    geom_hline(yintercept = 0)
}

qq_plot <- function(data) {
  data |>
    ggplot(aes(sample = resid)) +
    stat_qq() +
    stat_qq_line() +
    facet_wrap(~class, scales = "free")
}

resid_qq_plot <- function(data) {
  data <- unnest(data, c(resid, fitted))
  list(
    a = resid_plot(data),
    b = qq_plot(data)
  )
}

d <- load2("long", all_of(c(transectid, load_vars))) |>
  group_by(class) |> nest() |> rowwise()

```

```{r}
#| label: fig-mod1-diagnostic
#| fig-height: 10
#| fig-cap: Residual vs fitted and normal quantile-quantile plots for a
#|   multi-level model with un-pooled treatment intercepts and partially pooled
#|   (random effects) for nested data. Fit using `lme4` The residuals are not
#|   homogenous.

form <- load ~ treatment + (1 | site/treatment/corner)

mod1 <- d |>
  mutate(
    mod = list(lme4::lmer(form, data)),
    fitted = list(fitted(mod)),
    resid = list(resid(mod, type = "pearson", scaled = TRUE)),
    .keep = "unused"
  ) 
  
resid_qq_plot(mod1) |> patchwork::wrap_plots(ncol = 1)

```

I'll try to control the variance by refitting the model with `nlme::lme` and
using the weights argument. I'll be using the pearson residuals which are
[corrected for heteroscedasticity](https://stackoverflow.com/a/24108158).

I had to use the control argument `sigma = 1` for the model to fit. I'm not sure
why, I read it in the documentation for `nlme::varConstProp`. I'm modeling
variance as a constant proportion of the fitted values of the model. This seems
to have cleaned up the variance.

```{r}
#| label: fig-mod2-diagnostic
#| fig-height: 10
#| fig-cap: Same as @fig-mod1-diagnostic but variance is modeled as a function
#|   fitted values, assuming a linear relationship. Fit with `nlme`. The
#|   (scaled) residuals are more homogenous now.

mod2 <- d |>
  mutate(
    mod = list(nlme::lme(
      fixed = load ~ treatment,
      random = ~ 1 | site/treatment/corner,
      data = data,
      weights = nlme::varConstProp(),
      control = nlme::lmeControl(sigma = 1)
    )),
    fitted = list(fitted(mod)),
    resid = list(resid(mod, type = "pearson")),
    .keep = "unused"
  )

patchwork::wrap_plots(resid_qq_plot(mod2), ncol = 1)

```

I'll compare AIC of the two models to see if one performs better than the other.

first, I want to see if the models produced by lme and lmer are equivalent

```{r}

d |>
  mutate(
    mod1 = list(lme4::lmer(form, data)),
    mod2 = list(nlme::lme(
      fixed = load ~ treatment,
      random = ~ 1 | site/treatment/corner,
      data = data
    )),
    .keep = "unused"
  ) |>
  pivot_longer(-class, names_to = "model") |>
  rowwise() |>
  mutate(s = list(broom.mixed::tidy(value, effect = "fixed"))) |>
  select(class, model, s) |>
  unnest(everything()) |>
  arrange(class, term)

```

they seem equivalent enough, although the random effects variances estimated by
`lmer` are somewhat smaller. Now, lets compare the two `lme` models. I'm fitting
with REML because I'm not changing the fixed effects structure.

```{r}

mod_c <- d |>
  mutate(
    mod1 = list(nlme::lme(
      fixed = load ~ treatment,
      random = ~ 1 | site/treatment/corner,
      data = data,
    )),
    mod2 = list(nlme::lme(
      fixed = load ~ treatment,
      random = ~ 1 | site/treatment/corner,
      data = data,
      weights = nlme::varConstProp(),
      control = nlme::lmeControl(sigma = 1),
    )),
    .keep = "unused"
  ) 

mod_c |>
  mutate(aic = list(across(starts_with("mod"), ~ AIC(.x))))|>
  select(aic)|> unnest(aic)

```

This indicates that the model with modeled variance fits the data better than
the model without.

Does this change our conclusions about the effect of the treatment?

```{r}

d <- load2("long", site, treatment, corner, all_of(load_vars)) |> 
  group_by(class)

m2 <- d |> nest() |> rowwise() |>
  transmute(
    mod = list(nlme::lme(
      fixed = load ~ treatment,
      random = ~ 1 | site/treatment/corner,
      data = data,
      weights = nlme::varConstProp(),
      control = nlme::lmeControl(sigma = 1),
    )),
    emmeans = list(emmeans::emmeans(mod, "treatment")),
    pairs = list(as_tibble(pairs(emmeans, infer = TRUE)))
  )

```

```{r}
#| label: tbl-multilevel-p-values2
#| tbl-cap: Pairwise comparisons among treatments with p-values < 0.05 for 6
#|   multilevel models using a model with variance modeled as a linear
#|   relationsihp with the fitted value.

select(m2, pairs) |> unnest(pairs) |>
  filter(p.value <= 0.05) |>
  knitr::kable(digits = 3)

```

```{r}
#| label: fig-multilevel-p-value2
#| fig-cap: 95% confidence intervals and pairwise comparisons of means for 6
#|   mixed models representing different fuel loading classes using a model with
#|   variance modeled as a linear relationsihp with the fitted value.
 
group_map(m2, ~ plot(.x$emmeans[[1]], comparisons = TRUE) + ggtitle(.x$class)) |>
  patchwork::wrap_plots()

```

No, it doesn't seem to make much of a difference.

## Other random effects structures

I'm not sure I'm using the correct random effects specification. The somewhat
confusing thing is that I have a random effects nested above *and* below my
fixed effect. This means that when I specify my random effect using the nesting
notation: `1 | site/treatment/corner`, I'm estimating a variance for
`corner:treatment:site`, `treatment:site`, and `site`. The interaction of
treatment and site here is analagous to a plot effect, of which there are 16.

## Bayesian mode

```{r}
#| include: false
library(tidybayes)
library(brms)
library(bayesplot)
```

I'll use `brms` with the same formula I used for the lmm above:

### Data

All the data is nested to facilitate modeling each fuel class separately. We'll
look at the average loading to get an idea of the data.

```{r}

d <- load2("long", all_of(c(transectid, load_vars))) |>
  group_by(class) |> nest() |> rowwise()

```

### Model formula


### Priors

We are using mostly uninformative priors for our un-pooled (fixed) estimates of
treatment intercepts. They are all set as normal distributions, centered at the
median of the fuel load with a sd of 2.5 times the sd of the data. They are
constrained to be positive, as it's not possible to have a negative fuel load.

```{r define-priors}
#| label: fig-priors
#| fig-cap: Normal priors centered at the median and sd of 2.5 times the sd of
#|   the data

# add calcualted priors to the data
d <- mutate(d, 
  priors = list(brms::set_prior(
    str_glue(
    "normal( {round(median(data$load))}, {round(2.5 * sd(data$load))} )"), 
    lb = 0
  ))
)

# Plot the priors
d |>
  mutate(
    prior_dist = list(select(tidybayes::parse_dist(priors), .dist_obj))
  ) |>
  unnest(prior_dist) |>
  ggplot(aes(xdist = .dist_obj)) +
    tidybayes::stat_halfeye(normalize = "panels") +
    geom_text(aes(label = format(.dist_obj), x = 0, y = 0.97, hjust = 0)) +
    facet_wrap(~ class, scales = "free_x")

```

### Model fitting

Now we'll fit the model

```{r model-spec}
#| message: false

form <- load ~  1 + treatment + (1 | site/treatment/corner)

bf2 <- mutate(d,
  mod = list(brms::brm(form, data,
    warmup = 3000,
    iter = 4000,
    cores = 4,
    control = list(adapt_delta = 0.99),
    prior = priors,
    file = paste0("fits/bf2_", class)
  ))
)

```

### Posterior Predictive check (Gaussian)

```{r pp-check-func}
#| code-fold: true

posterior_predictive_check <- function(models) {
  models <- mutate(models,
    pred = list(tidybayes::add_predicted_draws(data, mod, ndraws = 15)),
    lims = list(tibble(
      xmin = min(
        quantile(data$load, .0001),
        quantile(pred$.prediction, .0001)
      ),
      xmax = max(
        quantile(data$load, .9999),
        quantile(pred$.prediction, .9999)
      ))
    )
  )
  ggplot() + 
  geom_line(
    data = unnest(models, data),
    aes(x = load),
    stat = "density", size = 1
  ) +
  geom_line(
    data = unnest(models, pred),
    aes(x = .prediction, group = .draw),
    stat = "density", alpha = 0.15, size = 1
  ) +
  facet_wrap(~class, scales = "free") +
  coord_cartesian_panels(
    panel_limits = unnest(select(models, lims), lims)
  )
}

```

Here is a posterior predictive check.

```{r}
#| label: fig-gaus-pp-check
#| fig-cap: Density of the observed data (y) plotted against 10 random draws
#|   from the posterior predictive distribution.

posterior_predictive_check(bf2)

```

The Gaussian distribution is symmetric and doesn't capture well the peak near
zero and the long right tail of our observed values for most of the fuel
classes. It also dramatically overpredicts negative values (which are absent
from our data, despite the fact that the density smoothing of the observed
values seems to suggest there are some.)

The fact that the model predicts negative values suggests that it is not right
for our data, and could potentially be biasing comparissons between treatments.
A Gamma distribution for the response makes more sense.

### Gamma model

#### Formula

I'm assuming the outcome is hurdle gamma distributed:

$$
\operatorname{HurdleGamma}(y \mid \mu, \text{shape}, \text{hu}) =
\begin{cases}
\text{hu} 
  &\quad\text{if } y = 0, \text{ and}\\
(1 - \text{hu}) \operatorname{Gamma}(y \mid \alpha, \beta)
  &\quad\text{if } y > 0,
\end{cases}
$$

Where $\mu = frac{\alpha}{\beta} and \text{shape} = \beta$. 

$$
\begin{align*}
y_i &\sim \operatorname{HurdleGamma}(\mu, \text{shape}, \text{hu})\\
\log(\mu_i) &= \bar{\alpha} + 
  U_{\text{site}[i]}\sigma_{u} +
  V_{\text{plot}[i]}\sigma_{v} +
  W_{\text{corner}[i]}\sigma_{w} +
  \beta_{treatment[i]}\\
\bar{\alpha} &\sim \operatornam{normal}(M, S)\\
U_j &\sim \operatorname{normal}(0, 1) \qquad \text{for } j=1 \dots 4\\
V_j &\sim \operatorname{normal}(0, 1) \qquad \text{for } j=1 \dots 16\\
W_j &\sim \operatorname{normal}(0, 1) \qquad \text{for } j=1 \dots 64\\
\sigma_u &\sim \operatorname{StudentT^+}(3, 0.15, 0.01)\\
\sigma_v &\sim \operatorname{StudentT^+}(3, 0.15, 0.01)\\
\sigma_w &\sim \operatorname{StudentT^+}(3, 0.15, 0.01)\\
\beta_j &\sim \operatorname{normal}(0, .15) \qquad \text{for } j=1 \dots 4\\
\text{shape} &\sim \operatorname{Gamma}(0.01, 0.01)\\
\text{hu} &\sim \operatorname{beta}(1, 1)
\end{align*}
$$


$$
\begin{aligned}
  \operatorname{load}_{i}  &\sim \operatorname{Gamma} \left(\alpha_{j[i],k[i],l[i],m[i]}, \sigma^2 \right) \\
    \alpha_{j}  &\sim \operatorname{Normal} \left(\mu_{\alpha_{j}}, \sigma^2_{\alpha_{j}} \right)
    \text{, for corner:(treatment:site) j = 1,} \dots \text{,J} \\
    \alpha_{k}  &\sim \operatorname{Normal} \left(\mu_{\alpha_{k}}, \sigma^2_{\alpha_{k}} \right)
    \text{, for treatment:site k = 1,} \dots \text{,K} \\
    \alpha_{l}  &\sim \operatorname{Normal}\left(\mu_{\alpha_{l}}, \sigma^2_{\alpha_{l}} \right)
    \text{, for site l = 1,} \dots \text{,L} \\
    \alpha_{m}  &\sim \operatorname{Normal} \left(\mu_{\alpha_{m}}, \sigma^2_{\alpha_{m}} \right)
    \text{, for treatment m = 1,} \dots \text{,M}
\end{aligned}
$$

#### Gamma Priors

First I'll set my prior. This is complicated because we are now working with a
log link. According to Solomon Kurz, [this is how] to transform your mean and sd
for a normal distribution on the identity scale, to the equivalent normal
distribution on the log scale.

[this is how](https://solomonkurz.netlify.app/blog/2023-05-14-causal-inference-with-gamma-regression-or-the-problem-is-with-the-link-function-not-the-likelihood/#causal-inference-with-bayesian-gamma-regression)

```{r convert-prior}

d <- load2("long", all_of(c(transectid, load_vars))) |>
  group_by(class) |> nest() |> rowwise()

lnp <- function(data) {
  # Desired values
  m <- mean(data)
  s <- 2 * sd(data)
  # use the equations
  mu    <- log(m / sqrt(s^2 / m^2 + 1))
  sigma <- sqrt(log(s^2 / m^2 + 1))
  # output mu and sigma on lognormals own scale
  list(mu = round(mu, 4), sigma = round(sigma, 4))
}

```

```{r define-priors2}
#| label: fig-priors2
#| fig-cap: Normal priors centered at the median and sd of 2.5 times the sd of
#|   the data

# add calcualted priors to the data
d <- mutate(d, 
  priors = list(brms::set_prior(
    str_glue("normal({mu}, {sigma})", .envir = lnp(data$load))
  ))
)

# Plot the priors
pd <- d |>
  mutate(
    prior_dist = list( tidybayes::parse_dist(priors)),
    lims = list(
      tibble(
        xmin = quantile(exp(prior_dist$.dist_obj), .01),
        xmax = quantile(exp(prior_dist$.dist_obj), .99)
      )
    )
  ) |>
  rename(fuel_class = class)

ggplot(data = unnest(pd, prior_dist, names_repair = "universal")) +
tidybayes::stat_halfeye(
  aes(xdist = exp(.dist_obj)), 
  normalize = "panels"
) +
geom_text(aes(label = format(.dist_obj), x = mean(exp(.dist_obj)), y = 0.97, hjust = 0)) +
facet_wrap(~ fuel_class, scales = "free_x") +
coord_cartesian_panels(panel_limits = unnest(select(pd, lims), lims))

```

#### Gamma Prior predictive check

The below code ran with very many divergent transitions and the results did not
really make sense. This may have to do with [a comment I found here](https://discourse.mc-stan.org/t/prior-predictive-simulation-gives-unreasonable-results-for-lognormal-brms-model/16914/2?u=fisher-j): independent priors specified on the log link usually don't sample.

An alternative is refitting the whole model with different priors and comparing
the output to infer the prior influence. I'm not going to do that right now.

```{r}

# temp <- mutate(bf3, 
#   mod_prior = list(update(mod, 
#     sample_prior = "only", 
#     cores = 4,
#     warmup = 6000,
#     iter = 7000,
#     control = list(adapt_delta = .999)
#   ))
# )

```

#### Gamma model fitting

```{r}
#| message: false

# This takes a while to run, so I'm caching the model output, I need to make
# sure to manually delete "bf3.Rdata" when something changes and I need to
# re-run the model.
bf3 <- mutate(d,
  mod = list(brms::brm(form, data,
    warmup = 5000,
    iter = 6000,
    cores = 4,
    control = list(adapt_delta = 0.99),
    family = brms::hurdle_gamma(),
    prior = priors,
    file = paste0("fits/bf3_", class)
  ))
)

# change priors for non-linear model
d <- mutate(d, 
  priors = list(brms::set_prior(
    str_glue("normal({mu}, {sigma})", .envir = lnp(data$load)),
    nlpar = "a", coef = "Intercept"
    ) +
    set_prior("normal(0, 1)", nlpar = "b")  
  )
)

bf4 <- mutate(d,
  priors = list(
    set_prior(
      str_glue("normal({mu}, {sigma})", .envir = lnp(data$load)),
      nlpar = "a", coef = "Intercept"
    ) +
    set_prior("student_t(3, 0.15, 0.1)", nlpar = "a", class = "sd") +
    set_prior("student_t(3, 0, 0.3)", nlpar = "b", class = "b")
  ),
  mod = list(brms::brm(
    brms::bf(
      load ~ a + b,
      a ~ 1 + (1 | site/treatment/corner),
      b ~ 0 + treatment,
      nl = TRUE),
    data,
    warmup = 3000,
    iter = 4000,
    cores = 4,
    control = list(adapt_delta = 0.99),
    family = brms::hurdle_gamma(),
    prior = priors,
    sample_prior = TRUE,
    file = paste0("fits/bf4_", class)
  ))
)

bf5 <- mutate(d,
  priors = list(brms::set_prior(
    str_glue("normal({mu}, {sigma})", .envir = lnp(data$load))
  )),
  mod = list(brms::brm(
    brms::bf(load ~ 0 + Intercept + (1 | site/treatment/corner) + (1 | treatment)),
    data,
    warmup = 3000,
    iter = 4000,
    cores = 4,
    control = list(adapt_delta = 0.99),
    family = brms::hurdle_gamma(),
    prior = priors,
    file = paste0("fits/bf5_", class)
  ))
)


# predict_posterior_expected2(bf5)
# predict_expected_contrasts2(bf5, 0)
# posterior_predictive_check(bf5)

```

The model fit without convergence problems. I used the same priors as before,
but with a hurdle gamma response. This fits one model for the zeros and another
for the non-zero values, which are expected to be gamma distributed, that is,
positive and right skewed.

#### Gamma Posterior Predictive check

```{r}
#| label: fig-gamma-pp-check
#| fig-cap: Density of the observed data (y) plotted against 10 random draws
#|   from the posterior predictive distribution.

posterior_predictive_check(bf3)
```

The gamma model fits the data better. There are no predictions below zero
anymore. It does seem like the gamma distribution tends to predict higher
densities of lower values than we observed, as seen in the plots for the tenhr, thoushr, and
veg fuel classes. But generally, the predictions appear to agree with the
observed data pretty well.

#### Expected value of the posterior predictive

```{r predict-func}

# get posterior predictions for treatments, ignoring random effects. These are
# predictions for the expected value across all sites.

predict_posterior_expected <- function(data, plot = TRUE) {
  newdata <- tidyr::expand(data$data[[1]], nesting(treatment))
  data <- mutate(data,
    pred = list(
      tidybayes::epred_draws(mod, newdata, re_formula = NA, value = "pred")
    ),
    lims = list(
      tibble(xmin = 0, xmax = quantile(pred$pred, .995))
    )
  )
  if (plot) {
    p <- data |> unnest(pred) |>
      ggplot(aes(pred, treatment)) +
      tidybayes::stat_halfeye(normalize = "panels") +
      facet_wrap(~class, scales = "free_x") +
      coord_cartesian_panels(panel_limits = unnest(select(data, lims), lims))
    print(p)
  }
  invisible(data)
}


```

```{r}
#| label: fig-expected-predictions
#| fig-cap: >
#|   Posterior expected predictions, with no random effects. This reprsents the
#|   expected average conditions across all sites. The point estimate is the
#|   mode. Units are mg ha-1. Upper and lower limits are the 95% credible
#|   intervals.

expected_predictions <- predict_posterior_expected(bf3)

```

These are the expected predictions, or predictions for the mean. It only
includes the uncertainty in the mean and not the variance in predictions
estimated by the model.

There is quite a bit of uncertainty about the mean all around, but there is a
notable difference in that uncertainty among treatments for the onehr and veg
fuel classes.

Table @tbl-expected-predictions shows these data in a tabular format. I'm using
the highest density continuous interval because, while its hard to see in
@fig-expected-predictions, the highest desity region is actually slightly
discontinuous.

```{r}
#| label: tbl-expected-predictions
#| tbl-cap: Tabular data associated with @fig-expected-predictions. Upper and
#|   lower pertain to the 95% highest density *continuous* interval.

expected_predictions |>
  mutate(
    summary = list(tidybayes::mode_hdci(pred))
  ) |> select(summary) |> unnest(summary) |>
  select(treatment, prediction = pred, lower = .lower, upper = .upper) |>
  knitr::kable(digits = 1)

    # gt::gt(groupname_col = "class") |>
    # gt::tab_options(row_group.as_column = TRUE) |>
    # gt::fmt_number(decimals = 1)

```


```{r comparisons-func}
#| code-fold: true

predict_expected_contrasts <- function(data, rope_size, plot = TRUE) {
  # Assume treatment levels are the same for all models: they are.
  newdata <- expand(data$data[[1]], nesting(treatment))
  d <- data |>
    mutate(
      pred = list(
        tidybayes::epred_draws(mod, newdata, re_formula = NA, value = "pred") |>
        tidybayes::compare_levels(pred, by = treatment) |>
        select(contrast = treatment, pred) 
      ),
      rope = rope_size * sd(data$load),
      lims = list(
        tibble(xmin = quantile(pred$pred, .001), xmax = quantile(pred$pred, .999))
      )
    )
  if (plot) {
    p <- d |>
      unnest(c(pred)) |>
      ggplot(aes(x = pred, y = contrast)) +
      tidybayes::stat_halfeye(normalize = "panels") +
      geom_vline(aes(xintercept = rope))  +
      geom_vline(aes(xintercept = -rope))  +
      facet_wrap(~class, scales = "free_x") +
      coord_cartesian_panels(
        panel_limits = unnest(select(d, lims), lims)
      )
    print(p)
  }
  invisible(d)
}

```

```{r}
#| label: fig-compare-expected
#| fig-cap: Differences between expected values for each treatment, with 95%
#|   continuous interval shown. 

expected_contrasts <- predict_expected_contrasts(bf3, 0)

```

```{r}
#| label: tbl-expected-contrasts
#| tbl-cap: >
#|   Posterior expected predictions of pairwise differences in means, with no
#|   random effects. This reprsents the expected average conditions across all
#|   sites. Units are Mg ha-1. The point estimate is the mode. Upper and lower
#|   limits are the 95% credible intervals. Prob is the probability that the
#|   predicted difference matches the sign of its median–the probability that it
#|   is not zero.

expected_contrasts |>
  mutate(
    summary = list(tidybayes::mode_hdci(pred)),
    pred = list(group_by(pred, contrast)),
    prob = list(summarize(pred,
      prob = if_else(median(pred) > 0, 
        mean(pred > rope),
        mean(pred < rope)
      )
    )),
    summary = list(left_join(summary, prob, by = "contrast"))
  ) |> select(summary) |> unnest(c(summary)) |>
  select(contrast, prediction = pred, lower = .lower, upper = .upper, prob) |>
  knitr::kable(digits = 2)

```

## Final

### Model

#### Priors explanation

### fiting and diagnostics

#### Convergence

#### Posterior predictive check

### Results


#### Predicted means


#### Predicted contrasts


# TODO:

- [ ] Is there a problem with mispecification of the model (predicting negative
      loading values for individual transects) if we are just wanting to compare
      treatments?
- [ ] How do we interpret ICC when there are several grouping levels? What can we
      say about variance partitioning given our model?
- [ ] How do we interpret the estimated sd of our grouping levels for our model?
- [x] How do we interpret sigma for the liklihood distribution?
- [x] In a posterior predictive check, do we use the expected value of the
      prediciton, or individual predictions (including residual variance (i
      think))?
- [x] How different are the predictions between the Gaussian and the Gamma model?


