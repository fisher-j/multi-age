---
title: Import and wrangle regeneration data
format:
  html:
    code-fold: true
---

::: {.content-visible when-format="html"}

Load those libraries

```{r}
#| output: false

library(tidyverse)
library(readxl)


```

Load those data, new names.

```{r}

regen_0 <- local({
  col_names <- c(
    "site", "treat", "plot", "spp", "dbh_lt1", "dbh_lt2", "lcbh_gte2",
    paste0("dbh", 1:28)
  )
  read_excel("../data/Regen10yr.xlsx", skip = 2, col_names = col_names)
})

```

## Clean labels

First, I'll take a look at the character type columns. 

```{r}

select(regen_0, where(is.character)) |>
  map(unique)

```

I'll take the following steps to clean up this data:

- I'll make them all lowercase for convenience.
- The decision was made earlier to omit the plot HD - 2A, AKA "MD"
  (@sec-load-fuel-data).
- Remove observations of "CA NETTLE"
- Change "QUMU ..." to "GC"

```{r}

regen_1 <- regen_0 |>
  mutate(across(where(is.character), tolower)) |>
  mutate(spp = if_else(str_detect(spp, "qumu"), "gc", spp)) |>
  filter(treat != "hd -2a", spp != "ca nettle") |>
  mutate(treat = str_extract(treat, "gs|ld|ha|hd"))
   
```

This resulted in the removal of `r nrow(regen_0) - nrow(regen_1)` rows.

## Stretch data

Next, data is in an "unlimited-wide" format, and of a few different types. There are
counts for diameter classes (0-1 inch and 1 - 2 inch), and actual diameters for
all trees over 2 inches.

I'll make the simplying assumption that individuals in the 0-1 and 1-2 inch size
classes are on average at their midpoint in diameter. So each individual is 0.5
and 1.5 inches DBH for the first and second size classes, respectively.

I'll put live crown base heights in a separate table. For stems, I'll get one
long list of each regenerating stem. Finally, I'll convert inches to
centimeters.

```{r}

regen_lcbh <- select(regen_1, site, treat, plot, spp, lcbh_gte2)

regen_2 <- local({
  regen_lt2 <- select(regen_1, site, treat, plot, spp, dbh_lt1, dbh_lt2)
  regen_gt2 <- select(regen_1, site, treat, plot, spp, matches("dbh\\d"))

  regen_gt2_long <- regen_gt2 |>
    pivot_longer(matches("^dbh\\d+$"), values_to = "dbh", names_to = NULL) |>
    filter(!is.na(dbh))

  regen_lt2_long <- regen_lt2 |>
    pivot_longer(
      matches("^dbh_"),
      names_to = "dbh",
      names_pattern = ".*_(lt1|lt2)",
      values_to = "count",
      names_transform = \(x) case_match(x, "lt1" ~ 0.5, "lt2" ~ 1.5)
    ) |>
    uncount(count)

  bind_rows(regen_lt2_long, regen_gt2_long) |>
    arrange(site, treat, plot, spp, dbh) |>
    mutate(treat = factor(treat, c("gs", "ld", "ha", "hd"))) |>
    mutate(dbh = dbh * 2.54)
})

```

Save this data for summary, visualization, and potentially, modeling.

```{r}

regen <- regen_2

save(regen, regen_lcbh, file = "regen_wrangled.RData")

```

:::
